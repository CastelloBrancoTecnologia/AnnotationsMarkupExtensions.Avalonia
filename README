# WinUI 3 Markup Extension for Annotations

This project provides a Avalonia MarkupExtension called AnnotateExtension to bind UI properties (like Header, Description, PlaceHolder, MaxLength, etc.) directly from ViewModel annotations. It allows you to use data annotations on properties in your ViewModel and reflect them in your UI without manual XAML bindings.

# Features

- Automatically binds annotations like DisplayName, MaxLength, MinLength, Range, and custom attributes to UI elements.

- Supports CommunityToolkit.MVVM for easy ViewModel creation.

- Flexible fallback mechanism for finding fields with lowercase or underscore prefixes.

- Built-in logic for setting InputScope based on data annotations like EmailAddress, Password, Phone, etc.

# Supported Annotations / Atttributes

    - DisplayName      => Binds to the DisplayAttribute Name applyed to Property  
    - ShortDisplayName => Binds to the DisplayAttribute ShortName3 applyed to Property 
    - Description      => Binds to the DisplayAttribute Description applyed to Property 
    - MaxLength        => Binds to the LengthAttribute, StrinLengthAttribute ou MaxLengthAttribute applyed to Property  
    - MinLength        => Binds to the LengthAttribute, StrinLengthAttribute ou MinLengthAttribute applyed to Property 
    - MaxValue         => Binds to the RangeAttribute applyed to Property 
    - MinValue         => Binds to the RangeAttribute applyed to Property 
    - Prompt           => Binds to the DisplayAttribute Prompt applyed to Property   
    - DisplayFormat    => Binds to the DisplayFormatAttribute applyed to Property 
    - IsReadOnly       => Binds to the  ReadOnlyAttribute applyed to Property 
    - Mask             => Binds to the MaskAttribute applyed to Property  

# License

- This project is licensed under the MIT License.

Example ViewModel

Here is an example of a SignInViewModel using CommunityToolkit.MVVM. 

All fields are required, and annotations like MaxLength, MinLength, and Range are used to configure the form behavior.

``csharp

using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.ComponentModel.DataAnnotations;

public partial class SignInViewModel : ObservableObject
{
    [ObservableProperty]
    [Required]
    [StringLength(80, MinimumLength = 5)]
    [LowerCase]
    [Display(Name = "Full Name", Description = "Enter your full name", Prompt = "e.g., John Doe")]
    private string _name;

    [ObservableProperty]
    [Required]
    [StringLength(32, MinimumLength = 5)]
    [LowerCase]
    [Display(Name = "Username", Description = "Enter your desired username", Prompt = "e.g., johndoe")]
    private string _username;

    [ObservableProperty]
    [Required]
    [StringLength(16, MinimumLength = 6)]
    [Password]
    [Display(Name = "Password", Description = "Enter a secure password", Prompt = "e.g., ********")]
    private string _password;

    [ObservableProperty]
    [Required]
    [Range(typeof(DateTime), "01/01/1900", "12/31/2100")]
    [Display(Name = "Date of Birth", Description = "Select your date of birth", Prompt = "dd/mm/yyyy")]
    private DateTime _dateOfBirth;

    [ObservableProperty]
    [Required]
    [Range(0.5, 2.2)]
    [Display(Name = "Body Height", Description = "Enter your height in meters", Prompt = "e.g., 1.75")]
    private double _bodyHeight;
}
``

XAML Sign-In Form

This is a sample WinUI 3 sign-in form that uses the AnnotateExtension to bind UI properties like Header, Description, and Prompt directly from the ViewModel annotations.

``xml

<UserControl
    x:Class="YourAppNamespace.Views.SignInPage"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:vm="clr-namespace:YourAppNamespace.ViewModels"
    xmlns:local="clr-namespace:YourAppNamespace.MarkupExtensions"
    DataContext="{Binding vm:SignInViewModel}">

    <StackPanel Spacing="20" Padding="20">
        <!-- Name -->
        <TextBox 
            Watermark="{local:Annotate Name, PlaceHolder}" 
            MaxLength="{local:Annotate Name, MaxLength}" 
            Text="{Binding Name, Mode=TwoWay}" />

        <!-- Username -->
        <TextBox 
            Watermark="{local:Annotate Username, PlaceHolder}" 
            MaxLength="{local:Annotate Username, MaxLength}" 
            Text="{Binding Username, Mode=TwoWay}" />

        <!-- Password -->
        <TextBox 
            PasswordChar="*"
            Watermark="{local:Annotate Password, PlaceHolder}" 
            MaxLength="{local:Annotate Password, MaxLength}" 
            Text="{Binding Password, Mode=TwoWay}" />

        <!-- Date of Birth -->
        <DatePicker 
            SelectedDate="{Binding DateOfBirth, Mode=TwoWay}" />

        <!-- Body Height -->
        <TextBox 
            Watermark="{local:Annotate BodyHeight, PlaceHolder}" 
            Text="{Binding BodyHeight, Mode=TwoWay}" />

        <!-- Submit Button -->
        <Button Content="Submit" Command="{Binding SubmitCommand}" />
    </StackPanel>
</UserControl>

``

# Key Features in XAML:

- PlaceholderText: Binds to the Display(Prompt) attribute.

- MaxLength: Binds to the MaxLength or StringLength annotation.

- InputScope: Automatically chooses the best input scope based on data types like Email, Password, or custom logic.

# Installation & Usage

- Add the AnnotateExtension package  to your Avalonia project. -

- Annotate your ViewModel properties using attributes like [Display], [StringLength], [Range], [Required], etc.

 - Use the AnnotateExtension in XAML to bind UI properties like Header, MaxLength, and PlaceholderText directly from the ViewModel.

With this setup, you can automatically keep your UI and data logic in sync using the power of data annotations and the flexibility of WinUI 3.
